---
title: "Model Building and Prediction"
author: "Simon Oiry"
format: html
editor: Source
editor_options: 
  chunk_output_type: console
---

```{r library }

library(tidyverse)
library(tidymodels)
library(sf)
library(terra)
library(vetiver)
library(vip)
library(pins)
library(flextable)

```

```{r Data pre-processing}

### Open the training/testing shapefile and keep only needed classes
shp <- read_sf("Data/ROIAveiro.shp") %>% 
  select(Class,geometry) %>% 
  vect()

### Opening the multispectral drone flight
img <- rast("Data/Aveiro_MULTI_12m_ortho_1801.tif")


shp_rast <- terra::rasterize(shp,img,field = "Class")

stk <- rast(list(img, shp_rast)) %>% 
  as.data.frame(xy=T) %>% 
  set_names(c("x","y",paste0("B",c(1:10)),"Class"))%>% 
  filter(!is.na(Class),
         B1 != 65535)
```

```{r model_building}

stk_noData <- stk %>% 
  drop_na() %>% 
  mutate(Class = as.factor(Class))

splitdata<-initial_split(stk_noData)

df_train<-splitdata %>% 
  training()

df_test<-splitdata %>% 
  testing()

set.seed(234)

df_train_folds<-vfold_cv(df_train,strata = Class)

df_train_folds

Drone_recipe <- recipe(Class ~ ., data = df_train)%>% 
  update_role(x, y, new_role = "ID") 

Drone_juiced <- prep(Drone_recipe) %>% 
  juice()


tune_spec <- rand_forest(
  mtry = tune(),
  trees = 500,
  min_n = tune()
) %>%
  set_mode("classification") %>%
  set_engine("ranger")

tune_wf <- workflow() %>%
  add_recipe(Drone_recipe) %>%
  add_model(tune_spec)


set.seed(234)

tune_res <- tune_grid(
  tune_wf,
  resamples = df_train_folds,
  grid = 10
)

best_auc <- select_best(tune_res, metric = "roc_auc")

final_rf <- finalize_model(
  tune_spec,
  best_auc
)

final_rf


set.seed(234)

final_rf %>%
  set_engine("ranger", importance = "permutation") %>%
  fit(Class~.,data=Drone_juiced
  ) %>%
  vip(geom = "point")+
  theme_classic()

final_wf <- workflow() %>%
  add_recipe(Drone_recipe) %>%
  add_model(final_rf)

final_res <- final_wf %>%
  last_fit(splitdata)

final_res %>%
  collect_metrics()

RF_model<-final_res %>% 
   extract_workflow() %>% 
   vetiver_model(model_name = "RF_model")

saving_board<-board_folder(path="Output/Model/")
vetiver_pin_write(saving_board,RF_model)


```

```{r accuracy assessment and confusion matrix}
#| cache: true
#| echo: false
#| warning: false
#| eval: false

ClassID <- "Data/ClassID.csv" %>% 
  read.csv2() %>% 
  mutate(ID = as.factor(ID)) %>% 
  as_tibble()
 
model_result<-as.tibble(df_test) %>%
  dplyr::select(Class) %>% 
  dplyr::rename(Truth = Class) %>%
  bind_cols(RF_model %>% 
                          predict(new_data = as.tibble(df_test))) %>% 
  bind_cols(RF_model %>% 
              predict(new_data = as.tibble(df_test), type = "prob")) %>%  
  left_join(ClassID, by = c("Truth"="ID")) %>%
  dplyr::select(-Truth) %>%
  rename(Truth = Class) %>%
  left_join(ClassID, by = c(".pred_class"="ID")) %>%
  dplyr::select(-.pred_class) %>%
  rename(.pred_class = Class) %>%
  mutate(Truth = as.factor(Truth),.pred_class=as.factor(.pred_class))


brdr <- fp_border_default(color = "black", width = 1.5)

ClassID_row <- ClassID %>% 
  mutate(ID_row = as.character(1:nrow(.)))

conf_matrix<-model_result %>% 
  conf_mat(Truth, .pred_class) %>% 
    tidy() %>% 
  separate(name,into = c("cell","row","col")) %>% 
  left_join(ClassID_row, by = c("row"="ID_row")) %>%
  dplyr::select(-row, -ID) %>%
  rename(row = Class) %>%
  left_join(ClassID_row, by = c("col"="ID_row")) %>%
  dplyr::select(-col, -ID) %>%
  rename(col = Class) %>% 
  pivot_wider(names_from = "col", values_from = "value") %>% 
  dplyr::select(-cell)

conf_matrix<-cbind(rep("Prediction",nrow(conf_matrix)),conf_matrix) %>% 
  rename(name = 'rep("Prediction", nrow(conf_matrix))')

flextable(conf_matrix) %>%
  # rotate(j=1,rotation="btlr") %>%
  # merge_v(j = 1) %>% 
  set_header_labels(name = "", row = " ") %>% 
  add_header_row(values = rep("Truth",ncol(conf_matrix))) %>%
  merge_h(part = "header") %>%
    border_remove() %>% 
    hline_top(j = 2:10,border=brdr) %>% 
    vline(j=1,border=brdr) %>% 
    align(align = "center",part = "all") %>% 
  autofit()

#  
# model_result %>% 
#   pivot_longer(-c(1:2),names_to="Class_pred",values_to = "Class_prob") %>%
#   dplyr::filter(Class_prob>0) %>% 
#   ggplot(aes(x=Class_pred,y=Class_prob,color=Truth))+
#   geom_boxplot()+
#   facet_wrap(~Truth)

```

```{r Prediction}

### Model Opening ####

model_path<-"Output/Model"
name<-gsub(".*/","",list.dirs(model_path,recursive = F))
board<- board_folder(model_path)

models<-model_path %>% 
  list.files(pattern=".rds",recursive = T)

if (length(models)==1) {
  RF_model<-vetiver_pin_read(board,name = name)
}else{
 
  UseLast<- askYesNo(msg = paste0(length(models)," models has been found ! Do you want to use the last model ?"))
  if (UseLast == FALSE) {
    Pin = selectDirectory(caption="Select the version you want to use",path = paste0(model_path,"/",name))
    Pin = gsub(".*/","",Pin)
    RF_model<-vetiver_pin_read(board,name = name,version = Pin)
  }else{
    for (i in 1:length(models)) {
      if (i==1) {
       versions<-gsub(paste0("/","",gsub(".*/","",models[i])),"",models[i]) %>%
        gsub(".*/","",.)
       name_vec<-gsub(paste0("/","",gsub(".*/","",models[i])),"",models[i]) %>% 
         gsub("/.*","",.)
      }else{
       versions[i]<-gsub(paste0("/","",gsub(".*/","",models[i])),"",models[i]) %>%
        gsub(".*/","",.) 
              name_vec[i]<-gsub(paste0("/","",gsub(".*/","",models[i])),"",models[i]) %>% 
         gsub("/.*","",.)
      }
      
    }
    
    df_version<-tibble(names = name_vec,
                       version = versions,
                       year = substr(versions,1,4),
                       month = substr(versions,5,6),
                       day = substr(versions,7,8),
                       hour = substr(versions,10,11),
                       min = substr(versions,12,13),
                       sec = substr(versions,14,15))
    df_version$date<-paste0(df_version$year,"/",df_version$month,"/",df_version$day," ",df_version$hour,":",df_version$min,":",df_version$sec)
    
    df_version$date<-strptime(df_version$date,"%Y/%m/%d %H:%M:%S")
    for (i in 1:nrow(df_version)) {
      df_version$timediff[i]<-difftime(Sys.time(),df_version$date[i],units = "secs")
    }
    Pin<-df_version %>% 
      filter(timediff ==min(timediff)) %>% 
      dplyr::select(names,version)
     
    RF_model<-vetiver_pin_read(board,name = Pin$names,version = Pin$version)
  }
 
 
}

#####

stk <- rast(list(img)) %>% 
  as.data.frame(xy=T) %>% 
  set_names(c("x","y",paste0("B",c(1:10)))) %>% 
  dplyr::filter(B1 != 65535)

slice <- stk %>% 
  slice(1:10000)

pred <- slice %>% 
  as.data.frame() %>% 
  mutate(pred =as.data.frame(predict(RF_model,slice,type = "class"))[,1] %>% as.numeric())


rast_sf <- pred %>% 
  select(x,y,pred) %>% 
  rast(type="xyz", crs = "EPSG:4326")

writeRaster(rf_raster_out,"Output/pred1.tif")


```

